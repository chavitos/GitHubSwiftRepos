//
//  NetworkManager.swift
//  GitHubRepos
//
//  Created by Tiago Chaves on 27/07/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by Toledo's Swift Xcode Templates
//
import Foundation
import Alamofire

public enum Sort:String {
	case stars = "stars"
	case forks = "forks"
	case helpIssues = "help-wanted-issues"
	case updated = "updated"
}

public enum Order:String {
	case asc = "asc"
	case desc = "desc"
}

public enum Language:String {
	case swift = "swift"
	case javaScript = "javascript"
}

public enum Query {
	
	case language(language:Language)
	
	var queryString:String {
		
		var query = ""
		
		switch self {
		case .language(let language):
			query = "language:\(language.rawValue)"
		}
		
		return query
	}
}

enum GitHubReposRequests: URLRequestConvertible {

    static let baseURLPath              = "https://api.github.com"
    static let baseURI                  = ""
    static let completeURL              = "\(GitHubReposRequests.baseURLPath)\(GitHubReposRequests.baseURI)"
	
	//Results per page
	static let per_page = 20

	case getRepositories(query:Query,sort:Sort,order:Order,page:Int)
	
    var method: HTTPMethod {
        switch self {
        case .getRepositories:
            return .get
        }
    }
    
    var baseURL: String{
        switch self{
        case .getRepositories:
            return GitHubReposRequests.completeURL
        }
    }
    
    var path: String {
        switch self {
        case .getRepositories:
            return "/search/repositories"
        }
    }
    
    var parameters: [String: Any]? {
        switch self {
        case .getRepositories(let query, let sort, let order, let page):
			
			let params:[String:Any] = ["q":query.queryString,
									   "sort":sort.rawValue,
									   "order":order.rawValue,
									   "per_page":GitHubReposRequests.per_page,
									   "page":page]
			
            return params
        }
    }
    
    var headers:HTTPHeaders {
        switch self {
        case .getRepositories:
            return ["Content-Type":"application/x-www-form-urlencoded"]
        }
    }
    
    var isJsonEnconding:Bool{
        switch self {
        case  .getRepositories:
            return true
        }
    }
    
    public func asURLRequest() throws -> URLRequest {
        
        let url = try baseURL.asURL()
        var request = URLRequest(url: url.appendingPathComponent(path))
        
        request.httpMethod = method.rawValue
        
        for header in headers {
            request.setValue(header.value, forHTTPHeaderField: header.key)
        }
        
        request.timeoutInterval = TimeInterval(10 * 1000)
        
        if isJsonEnconding{
            return try JSONEncoding.default.encode(request, with: parameters)
        }
        
        return try URLEncoding.default.encode(request, with: parameters)
    }
}

class NetworkManager {
    
    static func request(withURL url:URLRequestConvertible, callback:@escaping (Data?,DataResponse<Any>?,Error?)->Void) {
        
        Alamofire.request(url).validate().responseJSON { response in
            
            NSLog("Requesting: \(url.urlRequest!)")
            
            switch response.result {
            case .success:
                let data = response.data
                NSLog("Request successed!")
                callback(data,response, nil)
            case .failure(let error):
                NSLog("Request failed! \(error.localizedDescription)")
                callback(nil,response, error)
            }
        }
    }
}
